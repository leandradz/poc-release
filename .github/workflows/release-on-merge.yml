name: Create Release on Merge

on:
  push:
    branches:
      - 'main'

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install GitHub CLI
      run: sudo apt-get install gh

    - name: Determine Release Tag
      id: determine_tag
      run: |
        # Get the latest commit hash that triggered the workflow
        COMMIT_HASH=$(git rev-parse HEAD)
        echo "Commit hash: $COMMIT_HASH"

        # Find the branch that was merged into main
        # If the workflow is triggered by a push to 'main', we can find the merge commit message
        MERGE_COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "Merge commit message: $MERGE_COMMIT_MSG"

        # Extract the branch name from the commit message
        BRANCH_NAME=$(echo "$MERGE_COMMIT_MSG" | grep -oP '(?<=Merge branch ").*(?=")')
        echo "Branch name: $BRANCH_NAME"

        # If branch name is empty, use the commit history to find it
        if [ -z "$BRANCH_NAME" ]; then
          echo "Branch name not found in commit message, trying alternative method..."
          # Find the branches that contain the merge commit
          BRANCH_NAME=$(git branch -r --contains $COMMIT_HASH | grep -v 'main' | head -n 1 | sed 's/origin\///')
        fi

        # Define the version bump based on branch type
        if [[ "$BRANCH_NAME" == feat/* ]]; then
          VERSION_BUMP="minor"
        elif [[ "$BRANCH_NAME" == chore/* ]]; then
          VERSION_BUMP="patch"
        elif [[ "$BRANCH_NAME" == fix/* ]]; then
          VERSION_BUMP="patch"
        elif [[ "$BRANCH_NAME" == hotfix/* ]]; then
          VERSION_BUMP="major"
        elif [[ "$BRANCH_NAME" == "" ]]; then
          echo "No branch name detected. Aborting."
          exit 1
        else
          echo "Unknown branch type, no version bump."
          exit 1
        fi

        # Get the current version from the latest tag, default to v0.0.0 if no tags exist
        CURRENT_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
        echo "Current tag: $CURRENT_TAG"

        # Bump the version
        NEW_TAG=$(npm version $VERSION_BUMP --no-git-tag-version | awk '{ print $2 }')
        echo "New tag: $NEW_TAG"
        echo "RELEASE_TAG=$NEW_TAG" >> $GITHUB_ENV

    - name: Create Release
      run: |
        gh release create "${{ env.RELEASE_TAG }}" \
          --title "${{ env.RELEASE_TAG }}" \
          --notes "Release created for branch type: ${{ env.RELEASE_TAG }}."

      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
