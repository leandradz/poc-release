name: Create Release on Merge

on:
  push:
    branches:
      - 'main'

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install GitHub CLI
      run: sudo apt-get install gh

    - name: Determine Release Tag
      id: determine_tag
      run: |
        # Get the latest commit hash that triggered the workflow
        COMMIT_HASH=$(git rev-parse HEAD)
        echo "Commit hash: $COMMIT_HASH"

        # Find the branch that was merged into main
        MERGE_BASE=$(git merge-base main $COMMIT_HASH)
        BRANCH_NAME=$(git branch --contains $MERGE_BASE | grep -v "main" | head -n 1 | sed 's/^\* //')
        echo "Branch name: $BRANCH_NAME"

        # Define the version bump based on branch type
        if [[ "$BRANCH_NAME" == feat/* ]]; then
          VERSION_BUMP="minor"
        elif [[ "$BRANCH_NAME" == chore/* ]]; then
          VERSION_BUMP="patch"
        elif [[ "$BRANCH_NAME" == fix/* ]]; then
          VERSION_BUMP="patch"
        elif [[ "$BRANCH_NAME" == hotfix/* ]]; then
          VERSION_BUMP="major"
        else
          echo "Unknown branch type, no version bump."
          exit 1
        fi

        # Get the current version from the latest tag, default to v0.0.0 if no tags exist
        CURRENT_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
        echo "Current tag: $CURRENT_TAG"

        # Bump the version
        NEW_TAG=$(npm version $VERSION_BUMP --no-git-tag-version | awk '{ print $2 }')
        echo "New tag: $NEW_TAG"
        echo "RELEASE_TAG=$NEW_TAG" >> $GITHUB_ENV

    - name: Create Release
      run: |
        gh release create "${{ env.RELEASE_TAG }}" \
          --title "${{ env.RELEASE_TAG }}" \
          --notes "Release created for branch type: ${{ env.RELEASE_TAG }}."

      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
